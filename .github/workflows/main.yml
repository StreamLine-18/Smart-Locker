name: Move Issue to In Progress on Assignment

on:
  issues:
    types: [assigned] # Trigger when an issue is assigned

jobs:
  move_to_in_progress:
    runs-on: ubuntu-latest
    steps:
      - name: Move issue to In Progress
        uses: actions/github-script@v6
        with:
          script: |
            const { graphql } = require('@octokit/graphql');

            const graphqlWithAuth = graphql.defaults({
              headers: {
                authorization: `token ${process.env.GITHUB_TOKEN}`,
              },
            });

            const projectName = "Your Project Name";
            const columnName = "In Progress";

            // Query the new Projects API to get the project ID
            const { organization } = await graphqlWithAuth(`
              query($org: String!, $projectName: String!) {
                organization(login: $org) {
                  projectsV2(first: 100, query: $projectName) {
                    nodes {
                      id
                      title
                    }
                  }
                }
              }
            `, {
              org: context.repo.owner,
              projectName: projectName,
            });

            const project = organization.projectsV2.nodes.find(p => p.title === projectName);
            if (!project) {
              throw new Error(`Project "${projectName}" not found`);
            }

            // Query the columns for the project
            const { node: projectDetails } = await graphqlWithAuth(`
              query($projectId: ID!) {
                node(id: $projectId) {
                  ... on ProjectV2 {
                    id
                    fields(first: 100) {
                      nodes {
                        id
                        name
                      }
                    }
                  }
                }
              }
            `, {
              projectId: project.id,
            });

            const column = projectDetails.fields.nodes.find(c => c.name === columnName);
            if (!column) {
              throw new Error(`Column "${columnName}" not found`);
            }

            // Move the issue to the specified column
            await graphqlWithAuth(`
              mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!, $value: String!) {
                updateProjectV2ItemFieldValue(input: {
                  projectId: $projectId,
                  itemId: $itemId,
                  fieldId: $fieldId,
                  value: $value
                }) {
                  projectV2Item {
                    id
                  }
                }
              }
            `, {
              projectId: project.id,
              itemId: context.payload.issue.node_id,
              fieldId: column.id,
              value: columnName,
            });

            console.log(`Issue moved to column "${columnName}" in project "${projectName}"`);
